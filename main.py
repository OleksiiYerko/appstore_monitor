#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ App Store
"""

import sys
import os
import argparse
import requests

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(os.path.join(os.path.dirname(__file__), "src"))

TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')
TELEGRAM_TOPIC_ID = os.environ.get('TELEGRAM_TOPIC_ID')

def send_telegram_message(message):
    if TELEGRAM_TOKEN and TELEGRAM_CHAT_ID:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        data = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
        if TELEGRAM_TOPIC_ID:
            data["message_thread_id"] = TELEGRAM_TOPIC_ID
        try:
            requests.post(url, data=data)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def main():
    parser = argparse.ArgumentParser(description="App Store Monitor - –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç")
    parser.add_argument("command", choices=["search", "check", "charts", "suggestions", "test"], 
                       help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    parser.add_argument("--bundle-id", default=os.environ.get('BUNDLE_ID', "com.kotiuzhynskyi.CameraTranslator"),
                       help="Bundle ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    parser.add_argument("--country", default="us", help="–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã")
    parser.add_argument("--limit", type=int, default=250, help="–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    args = parser.parse_args()
    
    if args.command == "search":
        from src.scrapers.search_appStore import main_loop
        import json
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        project_root = os.path.dirname(__file__)
        keywords_file = os.path.join(project_root, "data", "config", "keywords.json")
        
        if not os.path.exists(keywords_file):
            print(f"‚ùå –§–∞–π–ª {keywords_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        with open(keywords_file, "r", encoding="utf-8") as f:
            search_terms = json.load(f)
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ App Store")
        print(f"üì± Bundle ID: {args.bundle_id}")
        print(f"üìÑ –§–∞–π–ª –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {keywords_file}")
        print(f"üîç –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {args.limit}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(search_terms)}")
        print("-" * 50)
        send_telegram_message(f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ App Store –¥–ª—è {args.bundle_id} —Å {len(search_terms)} –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏")
        main_loop(args.bundle_id, search_terms, args.limit, keywords_file=keywords_file)
    
    elif args.command == "check":
        from src.scrapers.search_appStore import single_check
        import json
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        project_root = os.path.dirname(__file__)
        keywords_file = os.path.join(project_root, "data", "config", "keywords.json")
        
        if not os.path.exists(keywords_file):
            print(f"‚ùå –§–∞–π–ª {keywords_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        with open(keywords_file, "r", encoding="utf-8") as f:
            search_terms = json.load(f)
        
        print(f"üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ App Store")
        print(f"üì± Bundle ID: {args.bundle_id}")
        print(f"üìÑ –§–∞–π–ª –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {keywords_file}")
        print(f"üîç –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {args.limit}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(search_terms)}")
        print("-" * 50)
        single_check(args.bundle_id, search_terms, args.limit, keywords_file=keywords_file)
    
    elif args.command == "charts":
        from src.scrapers.charts_scraper import get_app_charts
        result = get_app_charts(args.bundle_id, args.country)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    elif args.command == "suggestions":
        from src.analyzers.get_suggestions import get_suggestions_for_app
        get_suggestions_for_app()
    
    elif args.command == "test":
        print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        print("–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

if __name__ == "__main__":
    main() 