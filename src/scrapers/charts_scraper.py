#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import subprocess
import json
import sys
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from src.utils.country_utils import get_country_name

def get_app_charts(bundle_id: str, country: str = "us", chart_type: str = "topfreeapplications"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —á–∞—Ä—Ç–∞—Ö App Store
    
    Args:
        bundle_id: ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        country: –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã (us, gb, etc.)
        chart_type: –¢–∏–ø —á–∞—Ä—Ç–∞ (topfreeapplications, toppaidapplications, newapplications, etc.)
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —á–∞—Ä—Ç–µ
    """
    try:
        country_name = get_country_name(country)
        print(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ä—Ç–∞ {chart_type} | –°—Ç—Ä–∞–Ω–∞: {country_name}...")

        node_code = f"""
        import store from 'app-store-scraper';
        
        store.list({{
            country: "{country}",
            category: 0,  // –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            collection: "{chart_type}",
            num: 200
        }}).then(results => {{
            console.log(JSON.stringify(results));
        }}).catch(err => {{
            console.error("ERR", err.message);
            process.exit(1);
        }});
        """

        result = subprocess.run(
            ["node", "--input-type=module", "-e", node_code],
            check=True,
            capture_output=True,
            text=True
        )

        apps = json.loads(result.stdout)

        for idx, app in enumerate(apps):
            if app.get("appId") == bundle_id:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ —á–∞—Ä—Ç–µ {chart_type}! –ü–æ–∑–∏—Ü–∏—è: #{idx + 1}")
                return {
                    "position": idx + 1,
                    "chart_type": chart_type,
                    "country": country,
                    "total_apps": len(apps),
                    "app_info": {
                        "name": app.get("title", ""),
                        "rating": app.get("score", 0),
                        "reviews": app.get("reviews", 0),
                        "price": app.get("price", "Free")
                    }
                }

        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —á–∞—Ä—Ç–µ {chart_type}")
        return None

    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Node.js –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ä—Ç–∞ {chart_type}:", e.stderr)
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Python –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ä—Ç–∞ {chart_type}:", str(e))
        return None

def get_multiple_charts(bundle_id: str, country: str = "us"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —á–∞—Ä—Ç–∞–º –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Å–µ–º —á–∞—Ä—Ç–∞–º
    """
    charts = {
        "topfreeapplications": "–¢–æ–ø –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö",
        "toppaidapplications": "–¢–æ–ø –ø–ª–∞—Ç–Ω—ã—Ö",
        "newapplications": "–ù–æ–≤—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        "topgrossingapplications": "–¢–æ–ø –ø–æ –¥–æ—Ö–æ–¥–∞–º"
    }
    
    results = {}
    
    for chart_type, chart_name in charts.items():
        result = get_app_charts(bundle_id, country, chart_type)
        if result:
            results[chart_type] = result
        else:
            results[chart_type] = {
                "position": None,
                "chart_type": chart_type,
                "country": country,
                "total_apps": 0,
                "app_info": {}
            }
    
    return results

def get_category_charts(bundle_id: str, country: str = "us", category_id: int = 6007):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω–æ–º —á–∞—Ä—Ç–µ
    
    Args:
        bundle_id: ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        country: –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã
        category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (6007 = Productivity, 6002 = Utilities, etc.)
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    try:
        country_name = get_country_name(country)
        print(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id} | –°—Ç—Ä–∞–Ω–∞: {country_name}...")

        node_code = f"""
        import store from 'app-store-scraper';
        
        store.list({{
            country: "{country}",
            category: {category_id},
            collection: "topfreeapplications",
            num: 200
        }}).then(results => {{
            console.log(JSON.stringify(results));
        }}).catch(err => {{
            console.error("ERR", err.message);
            process.exit(1);
        }});
        """

        result = subprocess.run(
            ["node", "--input-type=module", "-e", node_code],
            check=True,
            capture_output=True,
            text=True
        )

        apps = json.loads(result.stdout)

        for idx, app in enumerate(apps):
            if app.get("appId") == bundle_id:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! –ü–æ–∑–∏—Ü–∏—è: #{idx + 1}")
                return {
                    "position": idx + 1,
                    "category_id": category_id,
                    "country": country,
                    "total_apps": len(apps),
                    "app_info": {
                        "name": app.get("title", ""),
                        "rating": app.get("score", 0),
                        "reviews": app.get("reviews", 0)
                    }
                }

        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}")
        return None

    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Node.js –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}:", e.stderr)
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Python –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}:", str(e))
        return None

# –°–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π App Store
CATEGORIES = {
    6000: "Business",
    6001: "Weather",
    6002: "Utilities",
    6003: "Travel",
    6004: "Sports",
    6005: "Social Networking",
    6006: "Reference",
    6007: "Productivity",
    6008: "Photo & Video",
    6009: "News",
    6010: "Navigation",
    6011: "Music",
    6012: "Lifestyle",
    6013: "Health & Fitness",
    6014: "Games",
    6015: "Finance",
    6016: "Entertainment",
    6017: "Education",
    6018: "Books",
    6019: "Medical",
    6020: "Newsstand",
    6021: "Catalogs",
    6022: "Food & Drink",
    6023: "Shopping",
    6024: "Stickers",
    6025: "Developer Tools",
    6026: "Graphics & Design",
    6027: "Video Players & Editors",
    6028: "Magazines & Newspapers",
    6029: "Entertainment",
    6030: "Developer Tools",
    6031: "Graphics & Design",
    6032: "Video Players & Editors",
    6033: "Magazines & Newspapers",
    6034: "Entertainment",
    6035: "Developer Tools",
    6036: "Graphics & Design",
    6037: "Video Players & Editors",
    6038: "Magazines & Newspapers",
    6039: "Entertainment",
    6040: "Developer Tools",
    6041: "Graphics & Design",
    6042: "Video Players & Editors",
    6043: "Magazines & Newspapers",
    6044: "Entertainment",
    6045: "Developer Tools",
    6046: "Graphics & Design",
    6047: "Video Players & Editors",
    6048: "Magazines & Newspapers",
    6049: "Entertainment",
    6050: "Developer Tools"
}

def get_category_name(category_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID"""
    return CATEGORIES.get(category_id, f"Category {category_id}")

def get_app_info(bundle_id: str, country: str = "us"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    
    Args:
        bundle_id: ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        country: –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã
    
    Returns:
        dict: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    """
    try:
        country_name = get_country_name(country)
        print(f"üì± –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ | –°—Ç—Ä–∞–Ω–∞: {country_name}...")

        node_code = f"""
        import store from 'app-store-scraper';
        
        store.app({{
            id: "{bundle_id}",
            country: "{country}"
        }}).then(result => {{
            console.log(JSON.stringify(result));
        }}).catch(err => {{
            console.error("ERR", err.message);
            process.exit(1);
        }});
        """

        result = subprocess.run(
            ["node", "--input-type=module", "-e", node_code],
            check=True,
            capture_output=True,
            text=True
        )

        app_data = json.loads(result.stdout)
        
        if app_data:
            print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {app_data.get('title', 'Unknown')}")
            return {
                "title": app_data.get("title", ""),
                "developer": app_data.get("developer", ""),
                "category": app_data.get("category", ""),
                "rating": app_data.get("score", 0),
                "reviews": app_data.get("reviews", 0),
                "price": app_data.get("price", "Free"),
                "version": app_data.get("version", ""),
                "size": app_data.get("size", ""),
                "updated": app_data.get("updated", ""),
                "description": app_data.get("description", "")[:200] + "..." if len(app_data.get("description", "")) > 200 else app_data.get("description", "")
            }
        else:
            print("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None

    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Node.js –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:", e.stderr)
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Python –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:", str(e))
        return None 

def get_search_suggestions(query: str, country: str = "us"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        country: –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    """
    try:
        country_name = get_country_name(country)
        print(f"üîç –ü–æ–∏—Å–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è '{query}' | –°—Ç—Ä–∞–Ω–∞: {country_name}...")

        node_code = f"""
        import store from 'app-store-scraper';
        
        store.suggest({{
            term: "{query}",
            country: "{country}"
        }}).then(results => {{
            console.log(JSON.stringify(results));
        }}).catch(err => {{
            console.error("ERR", err.message);
            process.exit(1);
        }});
        """

        result = subprocess.run(
            ["node", "--input-type=module", "-e", node_code],
            check=True,
            capture_output=True,
            text=True
        )

        suggestions = json.loads(result.stdout)
        
        if suggestions:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(suggestions)} –ø–æ–¥—Å–∫–∞–∑–æ–∫")
            return suggestions
        else:
            print("‚ùå –ü–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []

    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Node.js –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫:", e.stderr)
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Python –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫:", str(e))
        return []

def get_suggestions_for_keywords(keywords: list, country: str = "us"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    
    Args:
        keywords: –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        country: –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    """
    results = {}
    
    for keyword in keywords:
        print(f"\nüìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: '{keyword}'")
        suggestions = get_search_suggestions(keyword, country)
        results[keyword] = suggestions
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(3)
    
    return results 