#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import json
import time
from datetime import datetime
from charts_scraper import get_suggestions_for_keywords

def load_keywords_and_countries():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open("keywords.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            keywords = list(data.keys())
            # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π
            countries = set()
            for v in data.values():
                countries.update(v)
            # –£–¥–∞–ª—è–µ–º 'ru' –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –µ—Å—Ç—å
            countries.discard('ru')
            return keywords, sorted(countries)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª keywords.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return [], []

def get_suggestions_for_app():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Å—Ç—Ä–∞–Ω—ã
    keywords, countries = load_keywords_and_countries()
    if not keywords:
        print("‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    if not countries:
        print("‚ùå –°—Ç—Ä–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ keywords.json")
        return
    
    print(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {keywords}")
    print(f"üåç –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω—ã –∏–∑ keywords.json: {countries}")
    
    all_results = {}
    
    for country in countries:
        print(f"\nüåç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω—ã: {country}")
        print("=" * 40)
        
        country_results = get_suggestions_for_keywords(keywords, country)
        all_results[country] = country_results
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        total_suggestions = sum(len(suggestions) for suggestions in country_results.values())
        print(f"üìä –í—Å–µ–≥–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country}: {total_suggestions}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏
        time.sleep(5)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"suggestions_app_{timestamp}.json"
    
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(all_results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    analyze_suggestions(all_results, keywords)

def analyze_suggestions(results, keywords):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 50)
    
    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è "translator" –∏–ª–∏ "translation"
    translator_mentions = {}
    
    for country, country_results in results.items():
        translator_mentions[country] = []
        
        for keyword, suggestions in country_results.items():
            for suggestion in suggestions:
                term = suggestion.get("term", "").lower()
                if "translator" in term or "translation" in term:
                    translator_mentions[country].append({
                        "keyword": keyword,
                        "suggestion": suggestion["term"]
                    })
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("üéØ –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º 'translator' –∏–ª–∏ 'translation':")
    
    for country, mentions in translator_mentions.items():
        if mentions:
            print(f"\nüåç {country}:")
            for mention in mentions:
                print(f"  ‚Ä¢ '{mention['keyword']}' ‚Üí '{mention['suggestion']}'")
        else:
            print(f"\nüåç {country}: –ù–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    summary = {
        "total_countries": len(results),
        "total_keywords": len(keywords),
        "translator_mentions": translator_mentions,
        "timestamp": datetime.now().isoformat()
    }
    
    summary_filename = f"suggestions_summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(summary_filename, "w", encoding="utf-8") as f:
        json.dump(summary, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {summary_filename}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("=" * 60)
    
    get_suggestions_for_app()
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!") 