#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json
import os
import base64

def get_project_root():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    return os.path.dirname(os.path.dirname(os.path.dirname(__file__)))

def load_telegram_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è GitHub Actions)
    env_token = os.environ.get('TELEGRAM_TOKEN')
    env_chat_id = os.environ.get('TELEGRAM_CHAT_ID')
    env_topic_id = os.environ.get('TELEGRAM_TOPIC_ID')
    
    if env_token and env_chat_id:
        print("üì± –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram")
        return env_token, env_chat_id, env_topic_id
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    config_path = os.path.join(get_project_root(), "data", "config", "telegram_config.json")
    try:
        with open(config_path, "r", encoding="utf-8") as f:
            config = json.load(f)
            return config.get("TG_TOKEN"), config.get("TG_CHAT_ID"), config.get("TG_TOPIC_ID")
    except FileNotFoundError:
        print(f"‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return "YOUR_BOT_TOKEN", "YOUR_CHAT_ID", None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram: {e}")
        return "YOUR_BOT_TOKEN", "YOUR_CHAT_ID", None

def load_message_ids():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
    message_ids_path = os.path.join(get_project_root(), "data", "config", "message_ids.json")
    print(f"üîç –ó–∞–≥—Ä—É–∂–∞–µ–º message_ids –∏–∑: {message_ids_path}")
    try:
        with open(message_ids_path, "r", encoding="utf-8") as f:
            data = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} message_ids: {list(data.keys())}")
            return data
    except FileNotFoundError:
        print(f"‚ö†Ô∏è –§–∞–π–ª message_ids –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å")
        return {}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ID —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return {}

def save_message_ids(message_ids):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª"""
    message_ids_path = os.path.join(get_project_root(), "data", "config", "message_ids.json")
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(message_ids)} message_ids –≤: {message_ids_path}")
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(message_ids_path), exist_ok=True)
        with open(message_ids_path, "w", encoding="utf-8") as f:
            json.dump(message_ids, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ Message IDs —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

def save_message_ids_to_repo(message_ids):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç message_ids –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —á–µ—Ä–µ–∑ GitHub API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        github_token = os.environ.get('GITHUB_TOKEN')
        if not github_token:
            print("‚ö†Ô∏è GITHUB_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ")
            return save_message_ids(message_ids)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        repo = os.environ.get('GITHUB_REPOSITORY')
        if not repo:
            print("‚ö†Ô∏è GITHUB_REPOSITORY –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ")
            return save_message_ids(message_ids)
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        file_path = "data/config/message_ids.json"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π SHA —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        url = f"https://api.github.com/repos/{repo}/contents/{file_path}"
        headers = {
            "Authorization": f"token {github_token}",
            "Accept": "application/vnd.github.v3+json"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        response = requests.get(url, headers=headers)
        sha = None
        if response.status_code == 200:
            sha = response.json().get("sha")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        content = json.dumps(message_ids, ensure_ascii=False, indent=2)
        content_bytes = content.encode('utf-8')
        content_b64 = base64.b64encode(content_bytes).decode('utf-8')
        
        data = {
            "message": "Update message IDs for App Store monitor",
            "content": content_b64,
            "branch": "main"
        }
        
        if sha:
            data["sha"] = sha
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        response = requests.put(url, headers=headers, json=data)
        
        if response.status_code in [200, 201]:
            print(f"‚úÖ Message IDs —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {file_path}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {response.status_code}")
            return save_message_ids(message_ids)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {e}")
        return save_message_ids(message_ids)

def load_message_ids_from_repo():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç message_ids –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —á–µ—Ä–µ–∑ GitHub API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        github_token = os.environ.get('GITHUB_TOKEN')
        if not github_token:
            print("‚ö†Ô∏è GITHUB_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ")
            return load_message_ids()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        repo = os.environ.get('GITHUB_REPOSITORY')
        if not repo:
            print("‚ö†Ô∏è GITHUB_REPOSITORY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ")
            return load_message_ids()
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        file_path = "data/config/message_ids.json"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        url = f"https://api.github.com/repos/{repo}/contents/{file_path}"
        headers = {
            "Authorization": f"token {github_token}",
            "Accept": "application/vnd.github.v3+json"
        }
        
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            content = response.json().get("content", "")
            content_decoded = base64.b64decode(content).decode('utf-8')
            data = json.loads(content_decoded)
            print(f"‚úÖ Message IDs –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {len(data)} –∑–∞–ø–∏—Å–µ–π")
            return data
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ")
            return load_message_ids()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {e}")
        return load_message_ids()

def send_to_telegram(message, country=None, message_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
    token, chat_id, topic_id = load_telegram_config()
    
    if not token or token == "YOUR_BOT_TOKEN":
        print("‚ö†Ô∏è –¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return None
    
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    
    data = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    
    if topic_id:
        data["message_thread_id"] = topic_id
    
    try:
        response = requests.post(url, data=data)
        response.raise_for_status()
        result = response.json()
        
        if result.get("ok"):
            return result["result"]["message_id"]
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {result}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return None

def update_message(message_id, new_text):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    print(f"üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message_id}")
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
    token, chat_id, topic_id = load_telegram_config()
    
    if not token or token == "YOUR_BOT_TOKEN":
        print("‚ö†Ô∏è –¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    url = f"https://api.telegram.org/bot{token}/editMessageText"
    
    data = {
        "chat_id": chat_id,
        "message_id": message_id,
        "text": new_text,
        "parse_mode": "HTML"
    }
    
    if topic_id:
        data["message_thread_id"] = topic_id
    
    try:
        response = requests.post(url, data=data)
        response.raise_for_status()
        result = response.json()
        
        if result.get("ok"):
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {result}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
        return False

def format_telegram_message(country_name, table_text, update_time):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram"""
    return f"""üì± <b>App Store Monitor</b>\nüåç <b>{country_name}</b>\n‚è∞ <b>{update_time}</b>\n\n<pre>{table_text}</pre>\n\n#AppStore #ASO #Monitor""" 