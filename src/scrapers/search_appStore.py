#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import time
import logging
from datetime import datetime
from collections import defaultdict
from tabulate import tabulate
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from src.scrapers.appstore_scraper import get_rank
from src.utils.country_utils import get_country_name
from src.utils.telegram_utils import load_message_ids, save_message_ids, send_to_telegram, format_telegram_message, load_telegram_config, update_message, load_message_ids_from_repo, save_message_ids_to_repo
from src.utils.state_manager import load_state, save_state, get_now_str, load_table_config, update_state_entry, load_state_from_repo, save_state_to_repo

def countdown(seconds, message="–û–∂–∏–¥–∞–Ω–∏–µ"):
    """–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    for remaining in range(seconds, 0, -1):
        h, m, s = remaining // 3600, (remaining % 3600) // 60, remaining % 60
        sys.stdout.write(f"\r{message}: {h:02}:{m:02}:{s:02} ")
        sys.stdout.flush()
        time.sleep(1)
    sys.stdout.write("\r" + " " * 40 + "\r")  # –æ—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏

def format_rank_display(prev_rank, rank):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
    if prev_rank != rank and prev_rank is not None:
        return f"#{prev_rank} ‚Üí #{rank}" if rank else f"#{prev_rank} ‚Üí x"
    elif prev_rank is None and rank is not None:
        return f"x ‚Üí #{rank}"
    else:
        return f"#{rank}" if rank else "x"

def main_loop(bundle_id, search_terms, limit, keywords_file=None):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram
    token, chat_id = load_telegram_config()
    print(f"üì± Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: —Ç–æ–∫–µ–Ω {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω' if token and token != 'YOUR_BOT_TOKEN' else '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
    state_file = os.path.join(project_root, "data", "results", "last_state.json")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ GITHUB_TOKEN –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    github_token = os.environ.get('GITHUB_TOKEN')
    if github_token:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–¥–ª—è GitHub Actions)
        prev_state = load_state_from_repo()
        # –ó–∞–≥—Ä—É–∂–∞–µ–º message_ids –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–¥–ª—è GitHub Actions)
        message_ids = load_message_ids_from_repo()
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        prev_state = load_state(state_file)
        message_ids = load_message_ids()
    
    # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º keywords_file, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
    if keywords_file:
        with open(keywords_file, "r", encoding="utf-8") as f:
            search_terms = json.load(f)
    
    # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Ç–∞–±–ª–∏—Ü—ã
    table_config = load_table_config()
    style = table_config["style"]
    columns = table_config["columns"]
    headers = table_config["headers"]
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞... (—Ç–∞–±–ª–∏—Ü–∞: {style}, –∫–æ–ª–æ–Ω–∫–∏: {columns})")
    print("‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 10 –º–∏–Ω—É—Ç")
    print("üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("-" * 50)
    
    iteration = 0
    while True:
        iteration += 1
        print(f"\nüîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration} - {get_now_str()}")
        
        grouped_results = defaultdict(list)
        current_state = {}
        now_str = get_now_str()

        for term, countries in search_terms.items():
            for country in countries:
                key = f"{country.lower()}|{term}"
                prev_info = prev_state.get(key, {})
                
                if not isinstance(prev_info, dict):
                    prev_info = {
                        "initial_rank": prev_info,
                        "last_rank": prev_info,
                        "last_change_time": None
                    }
                
                prev_rank = prev_info.get("last_rank")
                rank = get_rank(term, bundle_id, country, limit)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                current_state[key] = update_state_entry(prev_state, key, rank, now_str)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                state_info = current_state[key]
                initial_rank = state_info["initial_rank"]
                last_change_time = state_info.get("last_change_time", "x")
                
                grouped_results[country.upper()].append({
                    "#": None,  # –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
                    "KW": term,
                    "Init": f"#{initial_rank}" if initial_rank else "x",
                    "Now": format_rank_display(prev_rank, rank),
                    "UpdKW": last_change_time if last_change_time else "x"
                })
                
                # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(2)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram
        for country in sorted(grouped_results.keys()):
            country_items = grouped_results[country]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ '#'
            if "#" in columns:
                for idx, item in enumerate(country_items):
                    item["#"] = idx + 1
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
            table = [
                [item[col] for col in columns]
                for item in sorted(country_items, key=lambda x: int(x["Now"].split("#")[-1].split()[0]) if "#" in x["Now"] else float("inf"))
            ]
            
            text_table = tabulate(table, headers=headers, tablefmt=style)
            country_key = country.upper()
            country_name = get_country_name(country)
            country_update_time = get_now_str()
            
            message_text = format_telegram_message(country_name, text_table, country_update_time)
            
            # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_msg_id = send_to_telegram(message_text, country=country_key)
            if new_msg_id:
                message_ids[country_key] = new_msg_id
                print(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {country_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {country_name}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if github_token:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–¥–ª—è GitHub Actions)
            save_message_ids_to_repo(message_ids)
            save_state_to_repo(current_state)
        else:
            # –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            save_message_ids(message_ids)
            save_state(current_state, state_file)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º prev_state –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        prev_state = current_state
        
        print(f"‚úÖ –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print("‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ 1 —á–∞—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        countdown(3600, "–û–∂–∏–¥–∞–Ω–∏–µ")

def single_check(bundle_id, search_terms, limit, keywords_file=None):
    """–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–¥–ª—è GitHub Actions)"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram
    token, chat_id = load_telegram_config()
    print(f"üì± Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: —Ç–æ–∫–µ–Ω {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω' if token and token != 'YOUR_BOT_TOKEN' else '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
    state_file = os.path.join(project_root, "data", "results", "last_state.json")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–¥–ª—è GitHub Actions)
    prev_state = load_state_from_repo()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º message_ids –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–¥–ª—è GitHub Actions)
    message_ids = load_message_ids_from_repo()
    
    # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º keywords_file, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
    if keywords_file:
        with open(keywords_file, "r", encoding="utf-8") as f:
            search_terms = json.load(f)
    
    # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Ç–∞–±–ª–∏—Ü—ã
    table_config = load_table_config()
    style = table_config["style"]
    columns = table_config["columns"]
    headers = table_config["headers"]
    
    print(f"üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏... (—Ç–∞–±–ª–∏—Ü–∞: {style}, –∫–æ–ª–æ–Ω–∫–∏: {columns})")
    grouped_results = defaultdict(list)
    current_state = {}
    now_str = get_now_str()

    for term, countries in search_terms.items():
        for country in countries:
            key = f"{country.lower()}|{term}"
            prev_info = prev_state.get(key, {})
            
            if not isinstance(prev_info, dict):
                prev_info = {
                    "initial_rank": prev_info,
                    "last_rank": prev_info,
                    "last_change_time": None
                }
            
            prev_rank = prev_info.get("last_rank")
            rank = get_rank(term, bundle_id, country, limit)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_state[key] = update_state_entry(prev_state, key, rank, now_str)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            state_info = current_state[key]
            initial_rank = state_info["initial_rank"]
            last_change_time = state_info.get("last_change_time", "x")
            
            grouped_results[country.upper()].append({
                "#": None,  # –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
                "KW": term,
                "Init": f"#{initial_rank}" if initial_rank else "x",
                "Now": format_rank_display(prev_rank, rank),
                "UpdKW": last_change_time if last_change_time else "x"
            })
            
            # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(2)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram
    for country in sorted(grouped_results.keys()):
        country_items = grouped_results[country]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ '#'
        if "#" in columns:
            for idx, item in enumerate(country_items):
                item["#"] = idx + 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
        table = [
            [item[col] for col in columns]
            for item in sorted(country_items, key=lambda x: int(x["Now"].split("#")[-1].split()[0]) if "#" in x["Now"] else float("inf"))
        ]
        
        text_table = tabulate(table, headers=headers, tablefmt=style)
        country_key = country.upper()
        country_name = get_country_name(country)
        country_update_time = get_now_str()
        
        message_text = format_telegram_message(country_name, text_table, country_update_time)
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_msg_id = send_to_telegram(message_text, country=country_key)
        if new_msg_id:
            message_ids[country_key] = new_msg_id
            print(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {country_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {country_name}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–¥–ª—è GitHub Actions)
    save_message_ids_to_repo(message_ids)
    save_state_to_repo(current_state)
    
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    bundle_id = "my.app.video.translator"
    project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
    keywords_file = os.path.join(project_root, "data", "config", "keywords.json")
    limit = 250

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    if not os.path.exists(keywords_file):
        print(f"‚ùå –§–∞–π–ª {keywords_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)

    with open(keywords_file, "r", encoding="utf-8") as f:
        search_terms = json.load(f)

    print(f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ App Store")
    print(f"üì± Bundle ID: {bundle_id}")
    print(f"üìÑ –§–∞–π–ª –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {keywords_file}")
    print(f"üîç –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {limit}")
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(search_terms)}")
    print("-" * 50)

    main_loop(bundle_id, search_terms, limit, keywords_file=keywords_file)
